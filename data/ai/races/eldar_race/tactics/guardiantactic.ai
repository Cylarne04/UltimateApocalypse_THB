----------------------------------------
-- File: 'guardiantactic.ai'
-- Edited by Arkhan		@ 12.01.2006

class 'GuardianTactic' (EldarInfantryTactic)

function GuardianTactic:__init( squad_ai ) super( squad_ai )

	self:SetName("Guardian Tactic")
end

function GuardianTactic:Reinforce()

	-- Check if we are reinforcing
	if (self.squad_ai:IsReinforcing()) then
		return
	end
	
	-- If I am broken, don't upgrade!
	if (self:IsAffectedByMorale() and self.squad_ai:IsBroken()) then
		return
	end
	
	-- Don't reinforce squads in critical condition
	if (self.squad_ai:GetNumTroopers() <= self.squad_ai:GetMaxTroopers() / 3 and self.squad_ai:IsUnderAttack()) then
		return
	end

	if (not self.squad_ai:IsReinforcing()) then
		-- Always try to get the leader first
		if (self.squad_ai:CanReinforce(true, 0)) then
			self.squad_ai:DoReinforce(true, 0)
			return
		end
		
		-- Try for different types of squad members
		local leader1Index = 0
		local leader2Index = 1
		local leader3Index = 2
		local leader4Index = 3

		-- Get current leader count
		local numleader1 = self.squad_ai:GetLeaderCount( leader1Index )
		local numleader2 = self.squad_ai:GetLeaderCount( leader2Index)
		local numleader3 = self.squad_ai:GetLeaderCount( leader3Index )
		local numleader4 = self.squad_ai:GetLeaderCount( leader4Index )

		-- Desired number of each leader type
		local desiredleader1 = 1
		local desiredleader2 = 1
		local desiredleader3 = 2
		local desiredleader4 = 3
		local squadMax = self.squad_ai:GetMaxLeaderCount()

		-- Desired order of reinforcing
		if (numleader2 < desiredleader2) then
			if self.squad_ai:CanReinforce( true, leader2Index ) then
				self.squad_ai:DoReinforce( true, leader2Index )
			end
		elseif (numleader2 < desiredleader4) then
			if self.squad_ai:CanReinforce( true, leader4Index ) then
				self.squad_ai:DoReinforce( true, leader4Index )
			end
		elseif (numleader1 < desiredleader1) then
			if self.squad_ai:CanReinforce( true, leader1Index ) then
				self.squad_ai:DoReinforce( true, leader1Index )
			end

		elseif (numleader3 < desiredleader3) then
			if self.squad_ai:CanReinforce( true, leader3Index ) then
				self.squad_ai:DoReinforce( true, leader3Index )
			end
		end
	end
	
	-- Check resources
	local iRequisition = resource_manager:GetResourceAmount():Get(ResourceAmount.RT_Requisition)
	if ((iRequisition < 800 or self.m_bPowerCost) and not Tactic.Options.can_reinforce) then
		return
	end
	
	-- Always try to reinforce, as long as I have money
	if (self.squad_ai:CanReinforce( false, 0 ) and self.squad_ai:HasLeader() and cpu_manager:GetTierLevel() >= 2) then
		self.squad_ai:DoReinforce( false, 0 )
	end
end